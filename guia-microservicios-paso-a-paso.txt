# Gu√≠a de Microservicios - Paso a Paso para BurbujApp

## üöÄ Resumen de Implementaci√≥n Completada

### ‚úÖ **APIs Mock Implementadas**

Se ha creado un sistema completo de APIs mock en `src/services/OrderApiService.ts` que simula todas las operaciones necesarias para el manejo de √≥rdenes, clientes y servicios. Estas APIs est√°n listas para ser reemplazadas por endpoints reales cuando se implemente el backend.

### üì± **Pantallas Actualizadas con APIs Mock**

1. **‚úÖ MisOrdenesScreen.tsx** - Completamente integrado
   - Carga de √≥rdenes con paginaci√≥n
   - Filtros por estado y b√∫squeda
   - Ordenamiento m√∫ltiple
   - Actualizaci√≥n de estados
   - Marcado de pago
   - Pull-to-refresh
   - Generaci√≥n de c√≥digos QR

2. **‚úÖ DetalleOrdenScreen.tsx** - Completamente integrado
   - Carga de orden individual
   - Cambio de estados
   - Marcado de pago
   - Visualizaci√≥n completa de informaci√≥n
   - Historial de cambios de estado
   - Generaci√≥n de QR

3. **‚úÖ NuevaOrdenScreen.tsx** - Integrado con API
   - Creaci√≥n de √≥rdenes completas
   - Validaciones
   - Estados de carga
   - Integraci√≥n con OrderApiService

4. **‚úÖ SelectClienteScreen.tsx** - Completamente integrado
   - Listado de clientes con API
   - B√∫squeda y filtros
   - Creaci√≥n de nuevos clientes
   - Pull-to-refresh

5. **‚úÖ SelectArticulosScreen.tsx** - Completamente integrado
   - Listado de servicios con API
   - Filtros por categor√≠a
   - Carrito de compras funcional
   - Gesti√≥n de cantidades

## üìã **APIs Documentadas para Microservicios**

### üè¢ **1. Microservicio de Clientes**

#### **GET /api/v1/clientes**
```json
{
  "method": "GET",
  "endpoint": "/api/v1/clientes",
  "queryParams": {
    "page": "number (opcional, default: 1)",
    "limit": "number (opcional, default: 20)",
    "search": "string (opcional, buscar por nombre/tel√©fono/email)",
    "estado": "string (opcional: 'Activo' | 'Inactivo')"
  },
  "response": {
    "success": true,
    "data": [
      {
        "id": "uuid",
        "nombre": "string",
        "apellido": "string", 
        "email": "string",
        "telefono": "string",
        "direccion": "string",
        "telefonoSecundario": "string?",
        "estado": "Activo | Inactivo",
        "fechaCreacion": "ISO Date",
        "totalOrdenes": "number",
        "ultimaOrden": "ISO Date?"
      }
    ],
    "pagination": {
      "page": 1,
      "totalPages": 10,
      "totalItems": 200,
      "itemsPerPage": 20
    }
  }
}
```

#### **POST /api/v1/clientes**
```json
{
  "method": "POST",
  "endpoint": "/api/v1/clientes",
  "body": {
    "nombre": "string (requerido)",
    "apellido": "string (requerido)",
    "email": "string (requerido)",
    "telefono": "string (requerido)",
    "direccion": "string (requerido)",
    "telefonoSecundario": "string (opcional)",
    "estado": "Activo | Inactivo (default: Activo)"
  },
  "response": {
    "success": true,
    "data": {
      "id": "uuid",
      "nombre": "string",
      "apellido": "string",
      "email": "string",
      "telefono": "string",
      "direccion": "string",
      "telefonoSecundario": "string?",
      "estado": "Activo",
      "fechaCreacion": "ISO Date",
      "totalOrdenes": 0,
      "ultimaOrden": null
    }
  }
}
```

#### **GET /api/v1/clientes/{id}**
```json
{
  "method": "GET",
  "endpoint": "/api/v1/clientes/{id}",
  "response": {
    "success": true,
    "data": {
      "id": "uuid",
      "nombre": "string",
      "apellido": "string",
      "email": "string",
      "telefono": "string",
      "direccion": "string",
      "telefonoSecundario": "string?",
      "estado": "Activo | Inactivo",
      "fechaCreacion": "ISO Date",
      "totalOrdenes": "number",
      "ultimaOrden": "ISO Date?"
    }
  }
}
```

#### **PUT /api/v1/clientes/{id}**
```json
{
  "method": "PUT",
  "endpoint": "/api/v1/clientes/{id}",
  "body": {
    "nombre": "string",
    "apellido": "string",
    "email": "string",
    "telefono": "string",
    "direccion": "string",
    "telefonoSecundario": "string?",
    "estado": "Activo | Inactivo"
  },
  "response": {
    "success": true,
    "data": "Cliente actualizado completo"
  }
}
```

#### **DELETE /api/v1/clientes/{id}**
```json
{
  "method": "DELETE",
  "endpoint": "/api/v1/clientes/{id}",
  "response": {
    "success": true,
    "message": "Cliente eliminado exitosamente"
  }
}
```

### üßΩ **2. Microservicio de Servicios**

#### **GET /api/v1/servicios**
```json
{
  "method": "GET",
  "endpoint": "/api/v1/servicios",
  "queryParams": {
    "categoria": "string (opcional: 'lavado' | 'planchado' | 'limpieza_seco' | 'especiales')",
    "activo": "boolean (opcional, default: true)",
    "popular": "boolean (opcional)"
  },
  "response": {
    "success": true,
    "data": [
      {
        "id": "uuid",
        "nombre": "string",
        "descripcion": "string",
        "categoria": "lavado | planchado | limpieza_seco | especiales",
        "precio": "number",
        "unidad": "kilo | unidad | metro",
        "tiempoEstimado": "number (horas)",
        "instrucciones": "string?",
        "popular": "boolean",
        "activo": "boolean",
        "fechaCreacion": "ISO Date"
      }
    ]
  }
}
```

#### **POST /api/v1/servicios**
```json
{
  "method": "POST",
  "endpoint": "/api/v1/servicios",
  "body": {
    "nombre": "string (requerido)",
    "descripcion": "string (requerido)",
    "categoria": "lavado | planchado | limpieza_seco | especiales (requerido)",
    "precio": "number (requerido)",
    "unidad": "kilo | unidad | metro (requerido)",
    "tiempoEstimado": "number (requerido)",
    "instrucciones": "string (opcional)",
    "popular": "boolean (default: false)",
    "activo": "boolean (default: true)"
  },
  "response": {
    "success": true,
    "data": "Servicio creado completo"
  }
}
```

#### **PUT /api/v1/servicios/{id}**
```json
{
  "method": "PUT",
  "endpoint": "/api/v1/servicios/{id}",
  "body": {
    "nombre": "string",
    "descripcion": "string",
    "categoria": "lavado | planchado | limpieza_seco | especiales",
    "precio": "number",
    "unidad": "kilo | unidad | metro",
    "tiempoEstimado": "number",
    "instrucciones": "string?",
    "popular": "boolean",
    "activo": "boolean"
  },
  "response": {
    "success": true,
    "data": "Servicio actualizado completo"
  }
}
```

### üì¶ **3. Microservicio de √ìrdenes**

#### **GET /api/v1/ordenes**
```json
{
  "method": "GET",
  "endpoint": "/api/v1/ordenes",
  "queryParams": {
    "page": "number (opcional, default: 1)",
    "limit": "number (opcional, default: 20)",
    "estado": "string (opcional: 'Registrado' | 'En proceso' | 'Listo' | 'Entregado' | 'Cancelado')",
    "fechaDesde": "string (opcional, formato: YYYY-MM-DD)",
    "fechaHasta": "string (opcional, formato: YYYY-MM-DD)",
    "clienteId": "uuid (opcional)",
    "termino": "string (opcional, buscar por n√∫mero de orden o cliente)",
    "urgente": "boolean (opcional)",
    "pagado": "boolean (opcional)",
    "ordenarPor": "string (opcional: 'fecha' | 'total' | 'cliente' | 'estado')",
    "direccion": "string (opcional: 'asc' | 'desc', default: 'desc')"
  },
  "response": {
    "success": true,
    "data": [
      {
        "id": "uuid",
        "numeroOrden": "string (formato: ORD-YYYYMMDD-####)",
        "clienteId": "uuid",
        "cliente": {
          "id": "uuid",
          "nombre": "string",
          "apellido": "string",
          "telefono": "string",
          "email": "string",
          "direccion": "string"
        },
        "articulos": [
          {
            "id": "uuid",
            "servicioId": "uuid",
            "servicio": {
              "nombre": "string",
              "unidad": "kilo | unidad | metro"
            },
            "cantidad": "number",
            "precioUnitario": "number",
            "subtotal": "number",
            "instrucciones": "string?"
          }
        ],
        "subtotal": "number",
        "descuento": "number",
        "recargo": "number",
        "total": "number",
        "estado": "Registrado | En proceso | Listo | Entregado | Cancelado",
        "fechaCreacion": "ISO Date",
        "fechaEstimada": "ISO Date?",
        "fechaEntrega": "ISO Date?",
        "observaciones": "string?",
        "metodoPago": "efectivo | tarjeta | transferencia | qr",
        "urgente": "boolean",
        "pagado": "boolean",
        "historialEstados": [
          {
            "id": "uuid",
            "ordenId": "uuid",
            "estadoAnterior": "string?",
            "estadoNuevo": "string",
            "fechaCambio": "ISO Date",
            "usuarioId": "uuid",
            "usuario": "string",
            "observaciones": "string?"
          }
        ],
        "usuarioCreacion": "string"
      }
    ],
    "pagination": {
      "page": 1,
      "totalPages": 15,
      "totalItems": 300,
      "itemsPerPage": 20
    }
  }
}
```

#### **POST /api/v1/ordenes**
```json
{
  "method": "POST",
  "endpoint": "/api/v1/ordenes",
  "body": {
    "clienteId": "uuid (requerido)",
    "articulos": [
      {
        "servicioId": "uuid (requerido)",
        "cantidad": "number (requerido)",
        "precioUnitario": "number (requerido)",
        "subtotal": "number (requerido)",
        "instrucciones": "string (opcional)"
      }
    ],
    "subtotal": "number (requerido)",
    "descuento": "number (default: 0)",
    "recargo": "number (default: 0)",
    "total": "number (requerido)",
    "estado": "Registrado | En proceso | Listo | Entregado | Cancelado (default: Registrado)",
    "fechaEstimada": "ISO Date (opcional)",
    "fechaEntrega": "ISO Date (opcional)",
    "observaciones": "string (opcional)",
    "metodoPago": "efectivo | tarjeta | transferencia | qr (default: efectivo)",
    "urgente": "boolean (default: false)",
    "pagado": "boolean (default: false)",
    "usuarioCreacion": "string (requerido)"
  },
  "response": {
    "success": true,
    "data": "Orden completa creada"
  }
}
```

#### **GET /api/v1/ordenes/{id}**
```json
{
  "method": "GET",
  "endpoint": "/api/v1/ordenes/{id}",
  "response": {
    "success": true,
    "data": "Orden completa con todos los detalles"
  }
}
```

#### **PUT /api/v1/ordenes/{id}/estado**
```json
{
  "method": "PUT",
  "endpoint": "/api/v1/ordenes/{id}/estado",
  "body": {
    "nuevoEstado": "Registrado | En proceso | Listo | Entregado | Cancelado (requerido)",
    "observaciones": "string (opcional)",
    "usuarioId": "uuid (requerido)"
  },
  "response": {
    "success": true,
    "data": "Orden actualizada completa"
  }
}
```

#### **PUT /api/v1/ordenes/{id}/pago**
```json
{
  "method": "PUT",
  "endpoint": "/api/v1/ordenes/{id}/pago",
  "body": {
    "metodoPago": "efectivo | tarjeta | transferencia | qr (requerido)",
    "montoPagado": "number (opcional, si es diferente al total)",
    "referencia": "string (opcional, para transferencias o pagos digitales)"
  },
  "response": {
    "success": true,
    "data": "Orden actualizada con pago registrado"
  }
}
```

#### **PUT /api/v1/ordenes/{id}**
```json
{
  "method": "PUT",
  "endpoint": "/api/v1/ordenes/{id}",
  "body": {
    "fechaEstimada": "ISO Date",
    "fechaEntrega": "ISO Date",
    "observaciones": "string",
    "urgente": "boolean"
  },
  "response": {
    "success": true,
    "data": "Orden actualizada completa"
  }
}
```

#### **DELETE /api/v1/ordenes/{id}**
```json
{
  "method": "DELETE",
  "endpoint": "/api/v1/ordenes/{id}",
  "response": {
    "success": true,
    "message": "Orden cancelada/eliminada exitosamente"
  }
}
```

## üîß **Implementaci√≥n T√©cnica**

### **Arquitectura de Microservicios Recomendada**

1. **API Gateway**: Kong, AWS API Gateway, o Traefik
2. **Microservicios**: Node.js + Express o Python + FastAPI
3. **Base de Datos**: PostgreSQL para cada microservicio
4. **Autenticaci√≥n**: JWT con microservicio de auth separado
5. **Message Queue**: Redis o RabbitMQ para comunicaci√≥n entre servicios
6. **Deployment**: Docker + Kubernetes en Koyeb

### **Estructura de Proyecto Backend**

```
backend/
‚îú‚îÄ‚îÄ api-gateway/
‚îú‚îÄ‚îÄ auth-service/
‚îú‚îÄ‚îÄ cliente-service/
‚îú‚îÄ‚îÄ servicio-service/
‚îú‚îÄ‚îÄ orden-service/
‚îú‚îÄ‚îÄ notification-service/
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îî‚îÄ‚îÄ docker-compose.yml
```

### **Variables de Entorno por Microservicio**

```env
# Com√∫n para todos
DATABASE_URL=postgresql://user:pass@host:port/dbname
JWT_SECRET=tu_secret_key
API_VERSION=v1
CORS_ORIGIN=https://tu-frontend.com

# Espec√≠fico para ordenes
NOTIFICATION_SERVICE_URL=http://notification-service:3000
CLIENTE_SERVICE_URL=http://cliente-service:3000
SERVICIO_SERVICE_URL=http://servicio-service:3000

# Espec√≠fico para notificaciones  
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=tu-email@gmail.com
SMTP_PASS=tu-password-app
```

### **Endpoints de Salud y Monitoreo**

```json
{
  "endpoints": [
    "GET /health - Estado del servicio",
    "GET /metrics - M√©tricas de Prometheus",
    "GET /info - Informaci√≥n de la versi√≥n"
  ]
}
```

## üìö **Pr√≥ximos Pasos**

1. **‚úÖ Completar integraci√≥n en pantallas principales** - COMPLETADO
   - SelectClienteScreen.tsx ‚úÖ
   - SelectArticulosScreen.tsx ‚úÖ
   - Todas las pantallas principales integradas con APIs mock

2. **Implementar microservicios backend** siguiendo esta documentaci√≥n

3. **Configurar deployment en Koyeb**:
   - Crear servicios separados para cada microservicio
   - Configurar variables de entorno
   - Configurar base de datos PostgreSQL

4. **Reemplazar URLs mock** por URLs reales en OrderApiService.ts

5. **Implementar autenticaci√≥n y autorizaci√≥n**

6. **Agregar testing e2e**

7. **Configurar CI/CD pipeline**

## üéØ **Notas Importantes**

- Todas las APIs mock ya est√°n implementadas y funcionando
- El frontend est√° preparado para recibir datos reales
- Solo se necesita cambiar la baseUrl en OrderApiService.ts
- La estructura de datos est√° estandarizada y lista para producci√≥n
- Se incluye manejo de errores, loading states y validaciones

**Estado Actual**: ‚úÖ Listo para backend implementation
**Tiempo Estimado Backend**: 2-3 semanas para MVP completo
