/**
 * Gu√≠a de Uso del Sistema de APIs Mock/Real
 * 
 * Este archivo contiene ejemplos de c√≥mo usar el nuevo sistema unificado
 * que autom√°ticamente cambia entre mocks y API real seg√∫n configuraci√≥n.
 */

import { 
  apiService, 
  setAuthToken, 
  getEnvironmentInfo,
  checkServiceHealth,
  API_CONFIG 
} from '../index';

import type { 
  CreateClienteRequest,
  CreateOrdenRequest,
  OrdenesQueryParams
} from '../types/ApiTypes';

// =================== CONFIGURACI√ìN INICIAL ===================

/**
 * Verificar qu√© entorno estamos usando
 */
export const verificarEntorno = () => {
  const info = getEnvironmentInfo();
  console.log('üîß Configuraci√≥n actual:', info);
  
  if (info.useMock) {
    console.log('‚úÖ Usando datos mock - Perfecto para desarrollo');
  } else {
    console.log('üåê Usando API real - Conectando al microservicio .NET Core');
  }
  
  return info;
};

/**
 * Verificar conectividad
 */
export const verificarConectividad = async () => {
  console.log('üîç Verificando conectividad...');
  
  const isHealthy = await checkServiceHealth();
  
  if (isHealthy) {
    console.log('‚úÖ Servicio disponible');
  } else {
    console.log('‚ùå Servicio no disponible');
  }
  
  return isHealthy;
};

// =================== EJEMPLOS DE USO ===================

/**
 * Ejemplo: Cargar clientes con filtros
 */
export const ejemploCargarClientes = async () => {
  try {
    console.log('üìã Cargando clientes...');
    
    const response = await apiService.getClientes({
      page: 1,
      limit: 10,
      search: 'Gabriel',
      estado: 'Activo'
    });
    
    if (response.success) {
      console.log('‚úÖ Clientes cargados:', response.data.length);
      console.log('üìä Paginaci√≥n:', response.pagination);
      return response.data;
    }
  } catch (error) {
    console.error('‚ùå Error cargando clientes:', error);
  }
};

/**
 * Ejemplo: Crear nuevo cliente
 */
export const ejemploCrearCliente = async () => {
  try {
    const nuevoCliente: CreateClienteRequest = {
      nombre: 'Juan',
      apellido: 'P√©rez',
      email: 'juan.perez@email.com',
      telefono: '+591 78123456',
      direccion: 'Av. Principal #123, zona centro',
      estado: 'Activo'
    };
    
    console.log('üë§ Creando cliente...');
    
    const response = await apiService.createCliente(nuevoCliente);
    
    if (response.success) {
      console.log('‚úÖ Cliente creado:', response.data);
      return response.data;
    }
  } catch (error) {
    console.error('‚ùå Error creando cliente:', error);
  }
};

/**
 * Ejemplo: Cargar servicios por categor√≠a
 */
export const ejemploCargarServicios = async () => {
  try {
    console.log('üßΩ Cargando servicios de lavado...');
    
    const response = await apiService.getServicios({
      categoria: 'lavado',
      activo: true
    });
    
    if (response.success) {
      console.log('‚úÖ Servicios cargados:', response.data.length);
      return response.data;
    }
  } catch (error) {
    console.error('‚ùå Error cargando servicios:', error);
  }
};

/**
 * Ejemplo: Crear nueva orden
 */
export const ejemploCrearOrden = async () => {
  try {
    const nuevaOrden: CreateOrdenRequest = {
      clienteId: 'cliente-001',
      articulos: [
        {
          servicioId: 'servicio-001',
          cantidad: 3,
          precioUnitario: 8.50,
          subtotal: 25.50,
          instrucciones: 'Separar colores claros'
        }
      ],
      subtotal: 25.50,
      descuento: 2.50,
      total: 23.00,
      metodoPago: 'efectivo',
      urgente: false,
      usuarioCreacion: 'Usuario App'
    };
    
    console.log('üì¶ Creando orden...');
    
    const response = await apiService.createOrden(nuevaOrden);
    
    if (response.success) {
      console.log('‚úÖ Orden creada:', response.data.numeroOrden);
      return response.data;
    }
  } catch (error) {
    console.error('‚ùå Error creando orden:', error);
  }
};

/**
 * Ejemplo: Buscar √≥rdenes con filtros avanzados
 */
export const ejemploBuscarOrdenes = async () => {
  try {
    const filtros: OrdenesQueryParams = {
      page: 1,
      limit: 20,
      estado: 'En proceso',
      urgente: true,
      fechaDesde: '2024-08-01',
      fechaHasta: '2024-08-31',
      ordenarPor: 'fecha',
      direccion: 'desc'
    };
    
    console.log('üîç Buscando √≥rdenes...');
    
    const response = await apiService.getOrdenes(filtros);
    
    if (response.success) {
      console.log('‚úÖ √ìrdenes encontradas:', response.data.length);
      console.log('üìä Total:', response.pagination?.totalItems);
      return response.data;
    }
  } catch (error) {
    console.error('‚ùå Error buscando √≥rdenes:', error);
  }
};

/**
 * Ejemplo: Actualizar estado de orden
 */
export const ejemploActualizarEstado = async (ordenId: string) => {
  try {
    console.log('‚è´ Actualizando estado de orden...');
    
    const response = await apiService.updateEstadoOrden(ordenId, {
      nuevoEstado: 'Listo',
      observaciones: 'Lavado completado, listo para entrega',
      usuarioId: 'user-001'
    });
    
    if (response.success) {
      console.log('‚úÖ Estado actualizado:', response.data.estado);
      return response.data;
    }
  } catch (error) {
    console.error('‚ùå Error actualizando estado:', error);
  }
};

/**
 * Ejemplo: Cargar dashboard con estad√≠sticas
 */
export const ejemploCargarDashboard = async () => {
  try {
    console.log('üìä Cargando dashboard...');
    
    const response = await apiService.getDashboard();
    
    if (response.success) {
      console.log('‚úÖ Dashboard cargado:');
      console.log('  - √ìrdenes hoy:', response.data.resumenHoy.ordenesNuevas);
      console.log('  - Ingresos hoy:', response.data.resumenHoy.ingresosDia);
      console.log('  - Clientes activos:', response.data.resumenSemana.clientesActivos);
      return response.data;
    }
  } catch (error) {
    console.error('‚ùå Error cargando dashboard:', error);
  }
};

/**
 * Ejemplo: Enviar notificaci√≥n
 */
export const ejemploEnviarNotificacion = async () => {
  try {
    console.log('üìß Enviando notificaci√≥n...');
    
    const response = await apiService.sendNotification({
      destinatario: 'gabriel.molina@email.com',
      tipo: 'email',
      asunto: 'Su orden est√° lista',
      mensaje: 'Estimado cliente, su orden ORD-20240809-0001 est√° lista para recoger.',
      plantilla: 'orden_lista'
    });
    
    if (response.success) {
      console.log('‚úÖ Notificaci√≥n enviada');
      return true;
    }
  } catch (error) {
    console.error('‚ùå Error enviando notificaci√≥n:', error);
  }
};

// =================== FUNCI√ìN DE TESTING COMPLETO ===================

/**
 * Ejecutar todos los ejemplos para probar el sistema
 */
export const probarSistemaCompleto = async () => {
  console.log('üß™ === INICIANDO PRUEBAS DEL SISTEMA API ===');
  
  // 1. Verificar configuraci√≥n
  verificarEntorno();
  await verificarConectividad();
  
  // 2. Configurar autenticaci√≥n (simulada)
  setAuthToken('mock-jwt-token-12345');
  
  // 3. Probar operaciones b√°sicas
  console.log('\nüìã === PROBANDO CLIENTES ===');
  await ejemploCargarClientes();
  await ejemploCrearCliente();
  
  console.log('\nüßΩ === PROBANDO SERVICIOS ===');
  await ejemploCargarServicios();
  
  console.log('\nüì¶ === PROBANDO √ìRDENES ===');
  await ejemploCrearOrden();
  await ejemploBuscarOrdenes();
  
  console.log('\nüìä === PROBANDO REPORTES ===');
  await ejemploCargarDashboard();
  
  console.log('\nüìß === PROBANDO NOTIFICACIONES ===');
  await ejemploEnviarNotificacion();
  
  console.log('\n‚úÖ === PRUEBAS COMPLETADAS ===');
};

// =================== UTILITIES PARA DESARROLLO ===================

/**
 * Cambiar entorno en tiempo de ejecuci√≥n (solo desarrollo)
 */
export const cambiarEntorno = (nuevoEntorno: string) => {
  console.log(`üîÑ Cambiando entorno a: ${nuevoEntorno}`);
  console.log('‚ö†Ô∏è  Nota: Esto requiere reiniciar la aplicaci√≥n para que surta efecto');
  
  // En el archivo de configuraci√≥n real, cambiar√≠as CURRENT_ENVIRONMENT
  // Esto es solo para referencia durante desarrollo
};

/**
 * Obtener estad√≠sticas del mock service
 */
export const obtenerEstadisticasMock = () => {
  if (API_CONFIG.useMock) {
    const stats = (global as any).mockApiService?.getStats?.();
    console.log('üìä Estad√≠sticas del Mock Service:', stats);
    return stats;
  } else {
    console.log('‚ÑπÔ∏è  No est√°s usando mocks actualmente');
    return null;
  }
};

export default {
  verificarEntorno,
  verificarConectividad,
  ejemploCargarClientes,
  ejemploCrearCliente,
  ejemploCargarServicios,
  ejemploCrearOrden,
  ejemploBuscarOrdenes,
  ejemploActualizarEstado,
  ejemploCargarDashboard,
  ejemploEnviarNotificacion,
  probarSistemaCompleto,
  cambiarEntorno,
  obtenerEstadisticasMock
};
